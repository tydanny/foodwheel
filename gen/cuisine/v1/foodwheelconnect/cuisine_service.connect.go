// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cuisine/v1/cuisine_service.proto

package foodwheelconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	foodwheel "github.com/tydanny/foodwheel"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CuisineServiceName is the fully-qualified name of the CuisineService service.
	CuisineServiceName = "cuisine.v1.CuisineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CuisineServiceGetCuisineProcedure is the fully-qualified name of the CuisineService's GetCuisine
	// RPC.
	CuisineServiceGetCuisineProcedure = "/cuisine.v1.CuisineService/GetCuisine"
	// CuisineServiceListCuisinesProcedure is the fully-qualified name of the CuisineService's
	// ListCuisines RPC.
	CuisineServiceListCuisinesProcedure = "/cuisine.v1.CuisineService/ListCuisines"
	// CuisineServiceCreateCuisineProcedure is the fully-qualified name of the CuisineService's
	// CreateCuisine RPC.
	CuisineServiceCreateCuisineProcedure = "/cuisine.v1.CuisineService/CreateCuisine"
	// CuisineServiceUpdateCuisineProcedure is the fully-qualified name of the CuisineService's
	// UpdateCuisine RPC.
	CuisineServiceUpdateCuisineProcedure = "/cuisine.v1.CuisineService/UpdateCuisine"
	// CuisineServiceDeleteCuisineProcedure is the fully-qualified name of the CuisineService's
	// DeleteCuisine RPC.
	CuisineServiceDeleteCuisineProcedure = "/cuisine.v1.CuisineService/DeleteCuisine"
)

// CuisineServiceClient is a client for the cuisine.v1.CuisineService service.
type CuisineServiceClient interface {
	// Retrieves a cuisine.
	GetCuisine(context.Context, *connect.Request[foodwheel.GetCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Lists Cuisines.
	ListCuisines(context.Context, *connect.Request[foodwheel.ListCuisinesRequest]) (*connect.Response[foodwheel.ListCuisinesResponse], error)
	// Create a new Cuisine.
	CreateCuisine(context.Context, *connect.Request[foodwheel.CreateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Update a Cuisine.
	UpdateCuisine(context.Context, *connect.Request[foodwheel.UpdateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Delete a Cuisine.
	DeleteCuisine(context.Context, *connect.Request[foodwheel.DeleteCuisineRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewCuisineServiceClient constructs a client for the cuisine.v1.CuisineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCuisineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CuisineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cuisineServiceMethods := foodwheel.File_cuisine_v1_cuisine_service_proto.Services().ByName("CuisineService").Methods()
	return &cuisineServiceClient{
		getCuisine: connect.NewClient[foodwheel.GetCuisineRequest, foodwheel.Cuisine](
			httpClient,
			baseURL+CuisineServiceGetCuisineProcedure,
			connect.WithSchema(cuisineServiceMethods.ByName("GetCuisine")),
			connect.WithClientOptions(opts...),
		),
		listCuisines: connect.NewClient[foodwheel.ListCuisinesRequest, foodwheel.ListCuisinesResponse](
			httpClient,
			baseURL+CuisineServiceListCuisinesProcedure,
			connect.WithSchema(cuisineServiceMethods.ByName("ListCuisines")),
			connect.WithClientOptions(opts...),
		),
		createCuisine: connect.NewClient[foodwheel.CreateCuisineRequest, foodwheel.Cuisine](
			httpClient,
			baseURL+CuisineServiceCreateCuisineProcedure,
			connect.WithSchema(cuisineServiceMethods.ByName("CreateCuisine")),
			connect.WithClientOptions(opts...),
		),
		updateCuisine: connect.NewClient[foodwheel.UpdateCuisineRequest, foodwheel.Cuisine](
			httpClient,
			baseURL+CuisineServiceUpdateCuisineProcedure,
			connect.WithSchema(cuisineServiceMethods.ByName("UpdateCuisine")),
			connect.WithClientOptions(opts...),
		),
		deleteCuisine: connect.NewClient[foodwheel.DeleteCuisineRequest, emptypb.Empty](
			httpClient,
			baseURL+CuisineServiceDeleteCuisineProcedure,
			connect.WithSchema(cuisineServiceMethods.ByName("DeleteCuisine")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cuisineServiceClient implements CuisineServiceClient.
type cuisineServiceClient struct {
	getCuisine    *connect.Client[foodwheel.GetCuisineRequest, foodwheel.Cuisine]
	listCuisines  *connect.Client[foodwheel.ListCuisinesRequest, foodwheel.ListCuisinesResponse]
	createCuisine *connect.Client[foodwheel.CreateCuisineRequest, foodwheel.Cuisine]
	updateCuisine *connect.Client[foodwheel.UpdateCuisineRequest, foodwheel.Cuisine]
	deleteCuisine *connect.Client[foodwheel.DeleteCuisineRequest, emptypb.Empty]
}

// GetCuisine calls cuisine.v1.CuisineService.GetCuisine.
func (c *cuisineServiceClient) GetCuisine(ctx context.Context, req *connect.Request[foodwheel.GetCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return c.getCuisine.CallUnary(ctx, req)
}

// ListCuisines calls cuisine.v1.CuisineService.ListCuisines.
func (c *cuisineServiceClient) ListCuisines(ctx context.Context, req *connect.Request[foodwheel.ListCuisinesRequest]) (*connect.Response[foodwheel.ListCuisinesResponse], error) {
	return c.listCuisines.CallUnary(ctx, req)
}

// CreateCuisine calls cuisine.v1.CuisineService.CreateCuisine.
func (c *cuisineServiceClient) CreateCuisine(ctx context.Context, req *connect.Request[foodwheel.CreateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return c.createCuisine.CallUnary(ctx, req)
}

// UpdateCuisine calls cuisine.v1.CuisineService.UpdateCuisine.
func (c *cuisineServiceClient) UpdateCuisine(ctx context.Context, req *connect.Request[foodwheel.UpdateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return c.updateCuisine.CallUnary(ctx, req)
}

// DeleteCuisine calls cuisine.v1.CuisineService.DeleteCuisine.
func (c *cuisineServiceClient) DeleteCuisine(ctx context.Context, req *connect.Request[foodwheel.DeleteCuisineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteCuisine.CallUnary(ctx, req)
}

// CuisineServiceHandler is an implementation of the cuisine.v1.CuisineService service.
type CuisineServiceHandler interface {
	// Retrieves a cuisine.
	GetCuisine(context.Context, *connect.Request[foodwheel.GetCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Lists Cuisines.
	ListCuisines(context.Context, *connect.Request[foodwheel.ListCuisinesRequest]) (*connect.Response[foodwheel.ListCuisinesResponse], error)
	// Create a new Cuisine.
	CreateCuisine(context.Context, *connect.Request[foodwheel.CreateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Update a Cuisine.
	UpdateCuisine(context.Context, *connect.Request[foodwheel.UpdateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error)
	// Delete a Cuisine.
	DeleteCuisine(context.Context, *connect.Request[foodwheel.DeleteCuisineRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewCuisineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCuisineServiceHandler(svc CuisineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cuisineServiceMethods := foodwheel.File_cuisine_v1_cuisine_service_proto.Services().ByName("CuisineService").Methods()
	cuisineServiceGetCuisineHandler := connect.NewUnaryHandler(
		CuisineServiceGetCuisineProcedure,
		svc.GetCuisine,
		connect.WithSchema(cuisineServiceMethods.ByName("GetCuisine")),
		connect.WithHandlerOptions(opts...),
	)
	cuisineServiceListCuisinesHandler := connect.NewUnaryHandler(
		CuisineServiceListCuisinesProcedure,
		svc.ListCuisines,
		connect.WithSchema(cuisineServiceMethods.ByName("ListCuisines")),
		connect.WithHandlerOptions(opts...),
	)
	cuisineServiceCreateCuisineHandler := connect.NewUnaryHandler(
		CuisineServiceCreateCuisineProcedure,
		svc.CreateCuisine,
		connect.WithSchema(cuisineServiceMethods.ByName("CreateCuisine")),
		connect.WithHandlerOptions(opts...),
	)
	cuisineServiceUpdateCuisineHandler := connect.NewUnaryHandler(
		CuisineServiceUpdateCuisineProcedure,
		svc.UpdateCuisine,
		connect.WithSchema(cuisineServiceMethods.ByName("UpdateCuisine")),
		connect.WithHandlerOptions(opts...),
	)
	cuisineServiceDeleteCuisineHandler := connect.NewUnaryHandler(
		CuisineServiceDeleteCuisineProcedure,
		svc.DeleteCuisine,
		connect.WithSchema(cuisineServiceMethods.ByName("DeleteCuisine")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cuisine.v1.CuisineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CuisineServiceGetCuisineProcedure:
			cuisineServiceGetCuisineHandler.ServeHTTP(w, r)
		case CuisineServiceListCuisinesProcedure:
			cuisineServiceListCuisinesHandler.ServeHTTP(w, r)
		case CuisineServiceCreateCuisineProcedure:
			cuisineServiceCreateCuisineHandler.ServeHTTP(w, r)
		case CuisineServiceUpdateCuisineProcedure:
			cuisineServiceUpdateCuisineHandler.ServeHTTP(w, r)
		case CuisineServiceDeleteCuisineProcedure:
			cuisineServiceDeleteCuisineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCuisineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCuisineServiceHandler struct{}

func (UnimplementedCuisineServiceHandler) GetCuisine(context.Context, *connect.Request[foodwheel.GetCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cuisine.v1.CuisineService.GetCuisine is not implemented"))
}

func (UnimplementedCuisineServiceHandler) ListCuisines(context.Context, *connect.Request[foodwheel.ListCuisinesRequest]) (*connect.Response[foodwheel.ListCuisinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cuisine.v1.CuisineService.ListCuisines is not implemented"))
}

func (UnimplementedCuisineServiceHandler) CreateCuisine(context.Context, *connect.Request[foodwheel.CreateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cuisine.v1.CuisineService.CreateCuisine is not implemented"))
}

func (UnimplementedCuisineServiceHandler) UpdateCuisine(context.Context, *connect.Request[foodwheel.UpdateCuisineRequest]) (*connect.Response[foodwheel.Cuisine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cuisine.v1.CuisineService.UpdateCuisine is not implemented"))
}

func (UnimplementedCuisineServiceHandler) DeleteCuisine(context.Context, *connect.Request[foodwheel.DeleteCuisineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cuisine.v1.CuisineService.DeleteCuisine is not implemented"))
}
