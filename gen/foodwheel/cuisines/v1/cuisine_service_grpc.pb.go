// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: foodwheel/cuisines/v1/cuisine_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CuisineService_GetCuisine_FullMethodName    = "/foodwheel.cuisines.v1.CuisineService/GetCuisine"
	CuisineService_ListCuisines_FullMethodName  = "/foodwheel.cuisines.v1.CuisineService/ListCuisines"
	CuisineService_CreateCuisine_FullMethodName = "/foodwheel.cuisines.v1.CuisineService/CreateCuisine"
	CuisineService_UpdateCuisine_FullMethodName = "/foodwheel.cuisines.v1.CuisineService/UpdateCuisine"
	CuisineService_DeleteCuisine_FullMethodName = "/foodwheel.cuisines.v1.CuisineService/DeleteCuisine"
)

// CuisineServiceClient is the client API for CuisineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service that manages cuisines.
type CuisineServiceClient interface {
	// Retrieves a cuisine.
	GetCuisine(ctx context.Context, in *GetCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error)
	// Lists Cuisines.
	ListCuisines(ctx context.Context, in *ListCuisinesRequest, opts ...grpc.CallOption) (*ListCuisinesResponse, error)
	// Create a new Cuisine.
	CreateCuisine(ctx context.Context, in *CreateCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error)
	// Update a Cuisine.
	UpdateCuisine(ctx context.Context, in *UpdateCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error)
	// Delete a Cuisine.
	DeleteCuisine(ctx context.Context, in *DeleteCuisineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cuisineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCuisineServiceClient(cc grpc.ClientConnInterface) CuisineServiceClient {
	return &cuisineServiceClient{cc}
}

func (c *cuisineServiceClient) GetCuisine(ctx context.Context, in *GetCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, CuisineService_GetCuisine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuisineServiceClient) ListCuisines(ctx context.Context, in *ListCuisinesRequest, opts ...grpc.CallOption) (*ListCuisinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCuisinesResponse)
	err := c.cc.Invoke(ctx, CuisineService_ListCuisines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuisineServiceClient) CreateCuisine(ctx context.Context, in *CreateCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, CuisineService_CreateCuisine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuisineServiceClient) UpdateCuisine(ctx context.Context, in *UpdateCuisineRequest, opts ...grpc.CallOption) (*Cuisine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, CuisineService_UpdateCuisine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuisineServiceClient) DeleteCuisine(ctx context.Context, in *DeleteCuisineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CuisineService_DeleteCuisine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CuisineServiceServer is the server API for CuisineService service.
// All implementations must embed UnimplementedCuisineServiceServer
// for forward compatibility.
//
// A service that manages cuisines.
type CuisineServiceServer interface {
	// Retrieves a cuisine.
	GetCuisine(context.Context, *GetCuisineRequest) (*Cuisine, error)
	// Lists Cuisines.
	ListCuisines(context.Context, *ListCuisinesRequest) (*ListCuisinesResponse, error)
	// Create a new Cuisine.
	CreateCuisine(context.Context, *CreateCuisineRequest) (*Cuisine, error)
	// Update a Cuisine.
	UpdateCuisine(context.Context, *UpdateCuisineRequest) (*Cuisine, error)
	// Delete a Cuisine.
	DeleteCuisine(context.Context, *DeleteCuisineRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCuisineServiceServer()
}

// UnimplementedCuisineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCuisineServiceServer struct{}

func (UnimplementedCuisineServiceServer) GetCuisine(context.Context, *GetCuisineRequest) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCuisine not implemented")
}
func (UnimplementedCuisineServiceServer) ListCuisines(context.Context, *ListCuisinesRequest) (*ListCuisinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCuisines not implemented")
}
func (UnimplementedCuisineServiceServer) CreateCuisine(context.Context, *CreateCuisineRequest) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCuisine not implemented")
}
func (UnimplementedCuisineServiceServer) UpdateCuisine(context.Context, *UpdateCuisineRequest) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCuisine not implemented")
}
func (UnimplementedCuisineServiceServer) DeleteCuisine(context.Context, *DeleteCuisineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCuisine not implemented")
}
func (UnimplementedCuisineServiceServer) mustEmbedUnimplementedCuisineServiceServer() {}
func (UnimplementedCuisineServiceServer) testEmbeddedByValue()                        {}

// UnsafeCuisineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CuisineServiceServer will
// result in compilation errors.
type UnsafeCuisineServiceServer interface {
	mustEmbedUnimplementedCuisineServiceServer()
}

func RegisterCuisineServiceServer(s grpc.ServiceRegistrar, srv CuisineServiceServer) {
	// If the following call pancis, it indicates UnimplementedCuisineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CuisineService_ServiceDesc, srv)
}

func _CuisineService_GetCuisine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCuisineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuisineServiceServer).GetCuisine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuisineService_GetCuisine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuisineServiceServer).GetCuisine(ctx, req.(*GetCuisineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuisineService_ListCuisines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCuisinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuisineServiceServer).ListCuisines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuisineService_ListCuisines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuisineServiceServer).ListCuisines(ctx, req.(*ListCuisinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuisineService_CreateCuisine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCuisineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuisineServiceServer).CreateCuisine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuisineService_CreateCuisine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuisineServiceServer).CreateCuisine(ctx, req.(*CreateCuisineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuisineService_UpdateCuisine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCuisineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuisineServiceServer).UpdateCuisine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuisineService_UpdateCuisine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuisineServiceServer).UpdateCuisine(ctx, req.(*UpdateCuisineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuisineService_DeleteCuisine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCuisineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuisineServiceServer).DeleteCuisine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CuisineService_DeleteCuisine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuisineServiceServer).DeleteCuisine(ctx, req.(*DeleteCuisineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CuisineService_ServiceDesc is the grpc.ServiceDesc for CuisineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CuisineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foodwheel.cuisines.v1.CuisineService",
	HandlerType: (*CuisineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCuisine",
			Handler:    _CuisineService_GetCuisine_Handler,
		},
		{
			MethodName: "ListCuisines",
			Handler:    _CuisineService_ListCuisines_Handler,
		},
		{
			MethodName: "CreateCuisine",
			Handler:    _CuisineService_CreateCuisine_Handler,
		},
		{
			MethodName: "UpdateCuisine",
			Handler:    _CuisineService_UpdateCuisine_Handler,
		},
		{
			MethodName: "DeleteCuisine",
			Handler:    _CuisineService_DeleteCuisine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foodwheel/cuisines/v1/cuisine_service.proto",
}
