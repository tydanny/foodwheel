// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/foodwheel/foodwheel.proto

package foodwheel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodwheelClient is the client API for Foodwheel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodwheelClient interface {
	// GetCuisine streams all Cuisines
	GetCuisines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Foodwheel_GetCuisinesClient, error)
	// GetCuisineByName returns a specific Cuisine based on the name
	GetCuisineByName(ctx context.Context, in *CuisineRequest, opts ...grpc.CallOption) (*Cuisine, error)
	// AddCuisine adds a new Cuisine to the database
	AddCuisine(ctx context.Context, in *Cuisine, opts ...grpc.CallOption) (*Cuisine, error)
	// Spin returns a random Cuisine
	Spin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cuisine, error)
}

type foodwheelClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodwheelClient(cc grpc.ClientConnInterface) FoodwheelClient {
	return &foodwheelClient{cc}
}

func (c *foodwheelClient) GetCuisines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Foodwheel_GetCuisinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Foodwheel_ServiceDesc.Streams[0], "/foodwheel.Foodwheel/GetCuisines", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodwheelGetCuisinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Foodwheel_GetCuisinesClient interface {
	Recv() (*Cuisine, error)
	grpc.ClientStream
}

type foodwheelGetCuisinesClient struct {
	grpc.ClientStream
}

func (x *foodwheelGetCuisinesClient) Recv() (*Cuisine, error) {
	m := new(Cuisine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodwheelClient) GetCuisineByName(ctx context.Context, in *CuisineRequest, opts ...grpc.CallOption) (*Cuisine, error) {
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, "/foodwheel.Foodwheel/GetCuisineByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodwheelClient) AddCuisine(ctx context.Context, in *Cuisine, opts ...grpc.CallOption) (*Cuisine, error) {
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, "/foodwheel.Foodwheel/AddCuisine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodwheelClient) Spin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cuisine, error) {
	out := new(Cuisine)
	err := c.cc.Invoke(ctx, "/foodwheel.Foodwheel/Spin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodwheelServer is the server API for Foodwheel service.
// All implementations must embed UnimplementedFoodwheelServer
// for forward compatibility
type FoodwheelServer interface {
	// GetCuisine streams all Cuisines
	GetCuisines(*Empty, Foodwheel_GetCuisinesServer) error
	// GetCuisineByName returns a specific Cuisine based on the name
	GetCuisineByName(context.Context, *CuisineRequest) (*Cuisine, error)
	// AddCuisine adds a new Cuisine to the database
	AddCuisine(context.Context, *Cuisine) (*Cuisine, error)
	// Spin returns a random Cuisine
	Spin(context.Context, *Empty) (*Cuisine, error)
	mustEmbedUnimplementedFoodwheelServer()
}

// UnimplementedFoodwheelServer must be embedded to have forward compatible implementations.
type UnimplementedFoodwheelServer struct {
}

func (UnimplementedFoodwheelServer) GetCuisines(*Empty, Foodwheel_GetCuisinesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCuisines not implemented")
}
func (UnimplementedFoodwheelServer) GetCuisineByName(context.Context, *CuisineRequest) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCuisineByName not implemented")
}
func (UnimplementedFoodwheelServer) AddCuisine(context.Context, *Cuisine) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCuisine not implemented")
}
func (UnimplementedFoodwheelServer) Spin(context.Context, *Empty) (*Cuisine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spin not implemented")
}
func (UnimplementedFoodwheelServer) mustEmbedUnimplementedFoodwheelServer() {}

// UnsafeFoodwheelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodwheelServer will
// result in compilation errors.
type UnsafeFoodwheelServer interface {
	mustEmbedUnimplementedFoodwheelServer()
}

func RegisterFoodwheelServer(s grpc.ServiceRegistrar, srv FoodwheelServer) {
	s.RegisterService(&Foodwheel_ServiceDesc, srv)
}

func _Foodwheel_GetCuisines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodwheelServer).GetCuisines(m, &foodwheelGetCuisinesServer{stream})
}

type Foodwheel_GetCuisinesServer interface {
	Send(*Cuisine) error
	grpc.ServerStream
}

type foodwheelGetCuisinesServer struct {
	grpc.ServerStream
}

func (x *foodwheelGetCuisinesServer) Send(m *Cuisine) error {
	return x.ServerStream.SendMsg(m)
}

func _Foodwheel_GetCuisineByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CuisineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodwheelServer).GetCuisineByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foodwheel.Foodwheel/GetCuisineByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodwheelServer).GetCuisineByName(ctx, req.(*CuisineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foodwheel_AddCuisine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cuisine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodwheelServer).AddCuisine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foodwheel.Foodwheel/AddCuisine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodwheelServer).AddCuisine(ctx, req.(*Cuisine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foodwheel_Spin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodwheelServer).Spin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foodwheel.Foodwheel/Spin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodwheelServer).Spin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Foodwheel_ServiceDesc is the grpc.ServiceDesc for Foodwheel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Foodwheel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foodwheel.Foodwheel",
	HandlerType: (*FoodwheelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCuisineByName",
			Handler:    _Foodwheel_GetCuisineByName_Handler,
		},
		{
			MethodName: "AddCuisine",
			Handler:    _Foodwheel_AddCuisine_Handler,
		},
		{
			MethodName: "Spin",
			Handler:    _Foodwheel_Spin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCuisines",
			Handler:       _Foodwheel_GetCuisines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/foodwheel/foodwheel.proto",
}
